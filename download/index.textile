---
layout: default
title: Download
excerpt: Download Tamasis package
---

h1. {{ page.title }}

The current stable version of the Tamasis/PACS package is {{ site.version_stable }}.
The project is hosted at "github":https://github.com/pchanial/tamasis-map/ and there are two ways to obtain it.
  
* Either by retrieving an archive
    - as a "tar file":https://github.com/pchanial/tamasis-map/tarball/v{{ site.version_stable }}/
    - or a "zip file":https://github.com/pchanial/tamasis-map/zipball/v{{ site.version_stable }}/.
<br/>
* Alternatively, by cloning the project, using the version control system "Git":http://git-scm.com/:

bc. $ git clone git://github.com/pchanial/tamasis-map.git tamasis-{{ site.version_stable }} --branch=v{{ site.version_stable }}

The second method is more convenient to make updates of the branch (if you've just cloned the repository, you will obviously not get anything new) or (without specifying the @--branch=v{{ site.version_stable }}@ option) to follow developments on or contribute to the master branch.

bc. $ cd tamasis-{{ site.version_stable }}
$ git pull
Already up-to-date.

This method is also required if you are to test tamasis' development branch.


h1. Setting up a scientific Python environment

Installing a Python environment for scientific purposes can be a hassle. I recommend installing a dedicated distribution such as "Enthought":http://www.enthought.com or "Python":http://www.pythonxy.com **(x,y)**. If you're up to the challenge of setting it up by yourself, you should install the following packages:

* "python":www.python.org >= 2.6 (< 3)
* "numpy":http://numpy.scipy.org >= 1.6
* "scipy":http://www.scipy.org >= 0.9
* "matplotlib":http://matplotlib.sourceforge.net >= 0.99
* "numexpr":http://code.google.com/p/numexpr >= 2.0
* "pyfits":http://www.stsci.edu/resources/software_hardware/pyfits >= 3.0
* optional, but recommended: "ipython":http://ipython.org

h1. Tamasis dependencies

h2. Compiler

* either "gfortran":http://gcc.gnu.org >= 4.5
* or "ifort":http://software.intel.com/en-us/articles/intel-composer-xe >= 11.1

h2. External libraries

* "cfitsio":http://heasarc.gsfc.nasa.gov/fitsio >= 3.23
* "FFTW":http://www.fftw.org >= 3.2.2 (compiled with options @--enable-threads@ and @--enable-shared@)

<!-- * "wcslib":http://www.atnf.csiro.au/people/mcalabre/WCS >= 4.4.4 -->
* optional, for a distributed installation: "openmpi":http://www.open-mpi.org or "mpich":http://www.mcs.anl.gov/research/projects/mpich2

h2. Python modules

* "pyoperators":http://pchanial.github.com/pyoperators >= 0.4
* "pyfftw":https://launchpad.net/pyfftw/ >= 0.2.1
* "kapteyn":http://www.astro.rug.nl/software/kapteyn >= 2.0.2

* optional, for a ds9 interface: "pyds9":http://hea-www.harvard.edu/saord/ds9/pyds9
* optional, for a distributed installation: "mpi4py":http://mpi4py.scipy.org


h1. Installation

Once all the dependencies are installed, type

bc. $ ./waf configure --prefix=/path/to/local build install test

Then, to make sure that the stack size of an OpenMP thread is large enough to handle a map, you should add to your @.bashrc@/@.bash_profile@ file the following lines:

{% highlight bash %}
export OMP_STACKSIZE=2g
ulimit -s unlimited
{% endhighlight %}


h1. Troubleshooting

* If you're using the Enthought Python Distribution, there symbol conflicts between the fftw3 library and the mkl library. Since the mkl library does not provide a backend for half complex operations, these will fail. To force the fftw library to be loaded before the mkl library, I set the following environment variable (check the fftw3 installation path):

bc. export LD_PRELOAD=/usr/local/lib/libfftw3.so:/usr/local/lib/libfftw3f.so


* if you have installed libraries in a non-standard location, make sure that the environment variable @LD_LIBRARY_PATH@ (Linux) or @DYLD_LIBRARY_PATH@ (MacOSX) contains the path of these libraries.

* if Python 3 is your default python interpreter (in Archlinux, for instance) and assuming that the Python 2 interpreter is 'python2', you can run the following command in bash:

bc. PYTHON=python2 python2 waf configure --prefix=~/local build install test
